{"version":3,"file":"dt-multi-select.js","sources":["../../../src/components/form/dt-multi-select/dt-multi-select.js"],"sourcesContent":["import { html, css } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { msg } from '@lit/localize';\nimport DtFormBase from '../dt-form-base.js';\nimport {HasOptionsList} from '../mixins/hasOptionsList.js';\nimport '../../icons/dt-spinner.js';\nimport '../../icons/dt-checkmark.js';\n\nexport class DtMultiSelect extends HasOptionsList(DtFormBase) {\n  static get styles() {\n    return [\n      ...super.styles,\n      css`\n        :host {\n          position: relative;\n          font-family: Helvetica, Arial, sans-serif;\n        }\n\n        .input-group {\n          color: var(--dt-multi-select-text-color, #0a0a0a);\n          margin-bottom: 1rem;\n        }\n        .input-group.disabled input,\n        .input-group.disabled .field-container {\n          background-color: var(--disabled-color);\n        }\n        .input-group.disabled a,\n        .input-group.disabled button {\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        .input-group.disabled *:hover {\n          cursor: not-allowed;\n        }\n\n        .field-container {\n          background-color: var(--dt-multi-select-background-color, #fefefe);\n          border: 1px solid var(--dt-form-border-color, #cacaca);\n          border-radius: 0;\n          color: var(--dt-multi-select-text-color, #0a0a0a);\n          font-size: 1rem;\n          font-weight: 300;\n          min-height: 2.5rem;\n          line-height: 1.5;\n          margin: 0;\n          padding-top: calc(0.5rem - 0.375rem);\n          padding-bottom: 0.5rem;\n          padding-inline: 0.5rem 1.6rem;\n          box-sizing: border-box;\n          width: 100%;\n          text-transform: none;\n          display: flex;\n          flex-wrap: wrap;\n        }\n\n        .field-container input,\n        .field-container .selected-option {\n          height: 1.25rem;\n        }\n\n        .selected-option {\n          border: 1px solid var(--dt-multi-select-tag-border-color, #c2e0ff);\n          background-color: var(\n            --dt-multi-select-tag-background-color,\n            #c2e0ff\n          );\n\n          display: flex;\n          font-size: 0.875rem;\n          position: relative;\n          border-radius: 2px;\n          margin-inline-end: 4px;\n          margin-block-start: 0.375rem;\n          box-sizing: border-box;\n        }\n        .selected-option > *:first-child {\n          padding-inline-start: 4px;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          white-space: nowrap;\n          --container-padding: calc(0.5rem + 1.6rem + 2px);\n          --option-padding: 8px;\n          --option-button: 20px;\n          max-width: calc(\n            var(--container-width) - var(--container-padding) -\n              var(--option-padding) - var(--option-button)\n          );\n        }\n        .selected-option * {\n          align-self: center;\n        }\n        .selected-option button {\n          background: transparent;\n          outline: 0;\n          border: 0;\n          border-inline-start: 1px solid\n            var(--dt-multi-select-tag-border-color, #c2e0ff);\n          color: var(--dt-multi-select-text-color, #0a0a0a);\n          margin-inline-start: 4px;\n        }\n        .selected-option button:hover {\n          cursor: pointer;\n        }\n\n        .field-container input {\n          background-color: var(--dt-form-background-color, #fff);\n          color: var(--dt-form-text-color, #000);\n          flex-grow: 1;\n          min-width: 50px;\n          border: 0;\n          margin-block-start: 0.375rem;\n        }\n        .field-container input:focus,\n        .field-container input:focus-visible,\n        .field-container input:active {\n          border: 0;\n          outline: 0;\n        }\n        .field-container input::placeholder {\n          color: var(--dt-text-placeholder-color, #999);\n          opacity: 1;\n        }\n\n        /* === Options List === */\n        .option-list {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          border: 1px solid var(--dt-form-border-color, #cacaca);\n          background: var(--dt-form-background-color, #fefefe);\n          z-index: 10;\n          position: absolute;\n          width: 100%;\n          top: 0;\n          left: 0;\n          box-shadow: var(--shadow-1);\n          max-height: 150px;\n          overflow-y: scroll;\n        }\n        .option-list li {\n          border-block-start: 1px solid var(--dt-form-border-color, #cacaca);\n          outline: 0;\n        }\n        .option-list li div,\n        .option-list li button {\n          padding: 0.5rem 0.75rem;\n          color: var(--dt-multi-select-text-color, #0a0a0a);\n          font-weight: 100;\n          font-size: 1rem;\n          text-decoration: none;\n          text-align: inherit;\n        }\n        .option-list li button {\n          display: block;\n          width: 100%;\n          border: 0;\n          background: transparent;\n        }\n        .option-list li button:hover,\n        .option-list li button.active {\n          cursor: pointer;\n          background: var(--dt-multi-select-option-hover-background, #f5f5f5);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      ...super.properties,\n      placeholder: { type: String },\n      containerHeight: {\n        type: Number,\n        state: true,\n      },\n      onchange: { type: String },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.value && this.value.length) {\n      this.value = this.value.map(value => {\n        if (value.id) {\n            return value.label;\n        }\n        return value;\n      });\n    }\n  }\n\n  _select(value) {\n    // Create custom event with new/old values to pass to onchange function\n    const event = new CustomEvent('change', {\n      bubbles: true,\n      detail: {\n        field: this.name,\n        oldValue: this.value,\n      },\n    });\n\n    // update value in this component\n    if (this.value && this.value.length) {\n      if (typeof this.value[0] === 'string') {\n        // If value is array of strings, check for same value prefixed with hyphen\n        this.value = [...this.value.filter(i => i !== `-${value}`), value];\n      } else {\n        // If value is array of objects, check for same value with `delete` property\n        let foundPrevious = false;\n        const newVal = this.value.map(i => {\n          const val = {\n            ...i,\n          };\n          if (i.id === value.id && i.delete) {\n            delete val.delete;\n            foundPrevious = true;\n          }\n          return val;\n        });\n        if (!foundPrevious) {\n          newVal.push(value);\n        }\n        this.value = newVal;\n      }\n    } else {\n      this.value = [value];\n    }\n    event.detail.newValue = this.value;\n    this.open = false; // close options list\n    this.activeIndex = -1; // reset keyboard-selected option\n\n    // dispatch event for use with addEventListener from javascript\n    this.dispatchEvent(event);\n    this._setFormValue(this.value);\n  }\n\n  _remove(e) {\n    if (e.target && e.target.dataset && e.target.dataset.value) {\n      const event = new CustomEvent('change', {\n        bubbles: true,\n        detail: {\n          field: this.name,\n          oldValue: this.value,\n        },\n      });\n      this.value = (this.value || []).map(i =>\n        i === e.target.dataset.value ? `-${i}` : i\n      );\n      event.detail.newValue = this.value;\n\n      // dispatch event for use with addEventListener from javascript\n      this.dispatchEvent(event);\n      this._setFormValue(this.value);\n\n      // If option was de-selected while list was open, re-focus input\n      if (this.open) {\n        this.shadowRoot.querySelector('input').focus();\n      }\n    }\n  }\n\n  /**\n   * Filter to options that:\n   *   1: are not selected\n   *   2: match the search query\n   * @private\n   */\n  _filterOptions() {\n    this.filteredOptions = (this.options || []).filter(\n      opt =>\n        !(this.value || []).includes(opt.id) &&\n        (!this.query ||\n          opt.label\n            .toLocaleLowerCase()\n            .includes(this.query.toLocaleLowerCase()))\n    );\n    return this.filteredOptions;\n  }\n\n  willUpdate(props) {\n    super.willUpdate(props);\n\n    if (props) {\n      const valueChanged = props.has('value');\n      const queryChanged = props.has('query');\n      const optionsChanged = props.has('options');\n\n      // if value, query, or options change, trigger filter\n      if (valueChanged || queryChanged || optionsChanged) {\n        this._filterOptions();\n      }\n    }\n  }\n\n  _renderSelectedOptions() {\n    return (\n      this.options &&\n      this.options\n        .filter(opt => this.value && this.value.indexOf(opt.id) > -1)\n        .map(\n          opt => html`\n            <div class=\"selected-option\">\n              <span>${opt.label}</span>\n              <button\n                @click=\"${this._remove}\"\n                ?disabled=\"${this.disabled}\"\n                data-value=\"${opt.id}\"\n              >\n                x\n              </button>\n            </div>\n          `\n        )\n    );\n  }\n\n  render() {\n    const optionListStyles = {\n      display: this.open ? 'block' : 'none',\n      top: this.containerHeight ? `${this.containerHeight}px` : '2.5rem',\n    };\n    return html`\n      ${this.labelTemplate()}\n\n      <div class=\"input-group ${this.disabled ? 'disabled' : ''}\">\n        <div\n          class=\"field-container\"\n          @click=\"${this._focusInput}\"\n          @keydown=\"${this._focusInput}\"\n        >\n          ${this._renderSelectedOptions()}\n          <input\n            type=\"text\"\n            placeholder=\"${this.placeholder}\"\n            @focusin=\"${this._inputFocusIn}\"\n            @blur=\"${this._inputFocusOut}\"\n            @keydown=\"${this._inputKeyDown}\"\n            @keyup=\"${this._inputKeyUp}\"\n            ?disabled=\"${this.disabled}\"\n          />\n        </div>\n        <ul class=\"option-list\" style=${styleMap(optionListStyles)}>\n          ${this._renderOptions()}\n        </ul>\n        ${this.loading\n          ? html`<dt-spinner class=\"icon-overlay\"></dt-spinner>`\n          : null}\n        ${this.saved\n          ? html`<dt-checkmark class=\"icon-overlay success\"></dt-checkmark>`\n          : null}\n        ${this.error\n          ? html`<dt-icon\n                icon=\"mdi:alert-circle\"\n                class=\"icon-overlay alert\"\n                tooltip=\"${this.error}\"\n                size=\"2rem\"\n                ></dt-icon>`\n              : null}\n        </div>\n`;\n  }\n}\n\nwindow.customElements.define('dt-multi-select', DtMultiSelect);\n"],"names":["DtMultiSelect","HasOptionsList","DtFormBase","styles","super","css","properties","placeholder","type","String","containerHeight","Number","state","onchange","connectedCallback","this","value","length","map","id","label","_select","event","CustomEvent","bubbles","detail","field","name","oldValue","filter","i","foundPrevious","newVal","val","delete","push","newValue","open","activeIndex","dispatchEvent","_setFormValue","_remove","e","target","dataset","shadowRoot","querySelector","focus","_filterOptions","filteredOptions","options","opt","includes","query","toLocaleLowerCase","willUpdate","props","valueChanged","has","queryChanged","optionsChanged","_renderSelectedOptions","indexOf","html","disabled","render","optionListStyles","display","top","labelTemplate","_focusInput","_inputFocusIn","_inputFocusOut","_inputKeyDown","_inputKeyUp","styleMap","_renderOptions","loading","saved","error","window","customElements","define"],"mappings":"qYAQO,MAAMA,UAAsBC,EAAeC,IACrCC,oBACT,MAAO,IACFC,MAAMD,OACTE,CAAG,m3FAyJN,CAEUC,wBACT,MAAO,IACFF,MAAME,WACTC,YAAa,CAAEC,KAAMC,QACrBC,gBAAiB,CACfF,KAAMG,OACNC,OAAO,GAETC,SAAU,CAAEL,KAAMC,QAErB,CAEDK,oBACEV,MAAMU,oBACFC,KAAKC,OAASD,KAAKC,MAAMC,SAC3BF,KAAKC,MAAQD,KAAKC,MAAME,KAAIF,GACtBA,EAAMG,GACCH,EAAMI,MAEVJ,IAGZ,CAEDK,QAAQL,GAEN,MAAMM,EAAQ,IAAIC,YAAY,SAAU,CACtCC,SAAS,EACTC,OAAQ,CACNC,MAAOX,KAAKY,KACZC,SAAUb,KAAKC,SAKnB,GAAID,KAAKC,OAASD,KAAKC,MAAMC,OAC3B,GAA6B,iBAAlBF,KAAKC,MAAM,GAEpBD,KAAKC,MAAQ,IAAID,KAAKC,MAAMa,QAAOC,GAAKA,IAAM,IAAId,MAAUA,OACvD,CAEL,IAAIe,GAAgB,EACpB,MAAMC,EAASjB,KAAKC,MAAME,KAAIY,IAC5B,MAAMG,EAAM,IACPH,GAML,OAJIA,EAAEX,KAAOH,EAAMG,IAAMW,EAAEI,gBAClBD,EAAIC,OACXH,GAAgB,GAEXE,CAAG,IAEPF,GACHC,EAAOG,KAAKnB,GAEdD,KAAKC,MAAQgB,CACd,MAEDjB,KAAKC,MAAQ,CAACA,GAEhBM,EAAMG,OAAOW,SAAWrB,KAAKC,MAC7BD,KAAKsB,MAAO,EACZtB,KAAKuB,aAAe,EAGpBvB,KAAKwB,cAAcjB,GACnBP,KAAKyB,cAAczB,KAAKC,MACzB,CAEDyB,QAAQC,GACN,GAAIA,EAAEC,QAAUD,EAAEC,OAAOC,SAAWF,EAAEC,OAAOC,QAAQ5B,MAAO,CAC1D,MAAMM,EAAQ,IAAIC,YAAY,SAAU,CACtCC,SAAS,EACTC,OAAQ,CACNC,MAAOX,KAAKY,KACZC,SAAUb,KAAKC,SAGnBD,KAAKC,OAASD,KAAKC,OAAS,IAAIE,KAAIY,GAClCA,IAAMY,EAAEC,OAAOC,QAAQ5B,MAAQ,IAAIc,IAAMA,IAE3CR,EAAMG,OAAOW,SAAWrB,KAAKC,MAG7BD,KAAKwB,cAAcjB,GACnBP,KAAKyB,cAAczB,KAAKC,OAGpBD,KAAKsB,MACPtB,KAAK8B,WAAWC,cAAc,SAASC,OAE1C,CACF,CAQDC,iBASE,OARAjC,KAAKkC,iBAAmBlC,KAAKmC,SAAW,IAAIrB,QAC1CsB,KACIpC,KAAKC,OAAS,IAAIoC,SAASD,EAAIhC,OAC/BJ,KAAKsC,OACLF,EAAI/B,MACDkC,oBACAF,SAASrC,KAAKsC,MAAMC,wBAEtBvC,KAAKkC,eACb,CAEDM,WAAWC,GAGT,GAFApD,MAAMmD,WAAWC,GAEbA,EAAO,CACT,MAAMC,EAAeD,EAAME,IAAI,SACzBC,EAAeH,EAAME,IAAI,SACzBE,EAAiBJ,EAAME,IAAI,YAG7BD,GAAgBE,GAAgBC,IAClC7C,KAAKiC,gBAER,CACF,CAEDa,yBACE,OACE9C,KAAKmC,SACLnC,KAAKmC,QACFrB,QAAOsB,GAAOpC,KAAKC,OAASD,KAAKC,MAAM8C,QAAQX,EAAIhC,KAAO,IAC1DD,KACCiC,GAAOY,CAAI,sCAECZ,EAAI/B,gCAEAL,KAAK0B,uBACF1B,KAAKiD,yBACJb,EAAIhC,wBAQ/B,CAED8C,SACE,MAAMC,EAAmB,CACvBC,QAASpD,KAAKsB,KAAO,QAAU,OAC/B+B,IAAKrD,KAAKL,gBAAkB,GAAGK,KAAKL,oBAAsB,UAE5D,OAAOqD,CAAI,GACPhD,KAAKsD,0CAEmBtD,KAAKiD,SAAW,WAAa,4CAGzCjD,KAAKuD,0BACHvD,KAAKuD,gBAEfvD,KAAK8C,4DAGU9C,KAAKR,0BACRQ,KAAKwD,yBACRxD,KAAKyD,6BACFzD,KAAK0D,0BACP1D,KAAK2D,2BACF3D,KAAKiD,kDAGUW,EAAST,OACrCnD,KAAK6D,wBAEP7D,KAAK8D,QACHd,CAAI,iDACJ,QACFhD,KAAK+D,MACHf,CAAI,6DACJ,QACFhD,KAAKgE,MACHhB,CAAI,wEAGWhD,KAAKgE,gCAGhB,YAGb,EAGHC,OAAOC,eAAeC,OAAO,kBAAmBlF"}